.TH cstring 3
.SH NAME
cstring \- A simple and lightweight string library for C inspired by C++'s
STL string class
.SH FUNCTIONS
.TP
.BR cstring\ cstring_create(const\ char\ *)
Instanciates and initializes a
.I cstring
object.
.TP
.BR void\ cstring_delete(cstring\ *)
Deallocate string.
.TP
.BR void\ cstring_assign(cstring\ *,\ const\ char\ *)
Assign a new string to the current string.
.TP
.BR void\ cstring_append(cstring\ *,\ const\ char\ *)
Append a string at the end of the current string.
.TP
.BR void\ cstring_insert(cstring\ *,\ const\ char\ *,\ size_t)
Insert a string at a specific index.
.TP
.BR void\ cstring_push_back(cstring\ *,\ char)
Add a character at the end of the string.
.TP
.BR void\ cstring_pop_back(cstring\ *)
Remove the last character in the string.
.TP
.BR void\ cstring_replace_char(cstring\ *,\ const\ char\ *)
Replace character at a specific index.
.TP
.BR cstring\ cstring_substr(cstring\ *,\ size_t\ ,\ size_t)
Extract a substring from current string.
.TP
.BR void\ cstring_clear(cstring\ *)
Erase the whole string.
.TP
.BR size_t\ cstring_find(const\ cstring\ *,\ const\ char\ *)
Find first occurence of a pattern in string.
.TP
.BR size_t\ cstring_find_first_of(const\ cstring\ *,\ char)
Find first occurence of a character in string.
.TP
.BR size_t\ cstring_find_last_of(const\ cstring\ *,\ char)
Find last occurence of a character in string.
.TP
.BR char\ cstring_front(const\ cstring\ *)
Returns the first character of the string.
.TP
.BR char\ cstring_back(const\ cstring\ *)
Returns the last character of the string.
.TP
.BR int\ cstring_empty(const\ cstring\ *)
Check to see if the string is empty.
.TP
.BR char\ *cstring_copy(const\ char\ *)
Make a copy of a given
.I const\ char\ *
.TP
.BR void\ cstring_resize(cstring\ *,\ size_t)
Resize the
.I str
array inside a given
.I cstring
struct.
.TP
.BR cstring\ *cstring_getline(FILE\ *,\ cstring\ *,\ char)
Read a line from a
.I FILE
stream. Similar behavior to
.I stdio's\ getline
.SH MACROS
The following macros should be used carefully
.TP
.BR CSTRING_OUT_OF_BOUNDS(cs,\ pos)
Check if
.I pos
is out of bounds.
.TP
.BR CSTRING_EXCEEDS_CAPACITY(len,\ cap)
Check if
.I len
is more than
.I cap
in order to resize the string.
.TP
.BR CSTRING_FIND_OCCURENCE(cs,\ s,\ func)
Although it should be used internally, this macro
returns the index at which
.I s
occurs in the string according to
.I func
which is used as a callback function, although it is
meant to support
.I strstr
,
.I strchr
and
.I strrchr
from
.I string.h
.SH CONSTANTS
.TP
.BR CSTRING_NPOS
This constant signifies that a pattern hasn't been found inside
the string. It's value is -1.
.SH USAGE
You must
.B always
call the
.I cstring_create
and
.I cstring_delete
functions whenever you want to make a new instance of
.I cstring
and stop using it respectively, in order to not cause any memory
leaks.
.P
The recommended way of initializing an empty string is by doing
.I cstring foo = cstring_create("")
.SH AUTHORS
Christos Margiolis <christos@christosmarg.xyz>
