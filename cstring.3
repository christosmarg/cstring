.TH cstring 3
.SH NAME
cstring \- A simple and lightweight string library for C inspired by C++'s
STL string class
.SH FUNCTIONS
.TP
.BR cstring\ cstring_create(const\ char\ *s)
Instanciates and initializes a
.I cstring
object.
.TP
.BR void\ cstring_delete(cstring\ *cs)
Deallocate string.
.TP
.BR void\ cstring_assign(cstring\ *cs,\ const\ char\ *s)
Assign a new string to current string.
.TP
.BR void\ cstring_append(cstring\ *cs,\ const\ char\ *s)
Append to end of string.
.TP
.BR void\ cstring_prepend(cstring\ *cs,\ const\ char\ *s)
Prepend to beginning of string.
.TP
.BR void\ cstring_insert(cstring\ *cs,\ const\ char\ *s,\ size_t\ i)
Insert at a specific index.
.TP
.BR void\ cstring_erase(cstring\ *cs,\ size_t\ pos,\ size_t\ len)
Erase a portion of the string.
.TP
.BR void\ cstring_erase_matching(cstring\ *cs,\ const\ char\ *s)
Erase first match from string.
.TP
.BR void\ cstring_erase_all_matching(cstring\ *cs,\ const\ char\ *s)
Erase all matches from string.
.TP
.BR void\ cstring_trim(cstring\ *cs,\ const\ char\ *s)
Trim characters from string.
.TP
.BR void\ cstring_push_back(cstring\ *cs,\ char\ c)
Add a character at the end of the string.
.TP
.BR void\ cstring_pop_back(cstring\ *cs)
Remove the last character in the string.
.TP
.BR void\ cstring_replace_char(cstring\ *cs,\ size_t\ i,\ char\ c)
Replace character at a specific index.
.TP
.BR void\ cstring_replace_str(cstring\ *cs,\ const\ char\ *s,\ size_t\ pos,\ size_t\ len)
Replace portion of the string.
.TP
.BR cstring\ cstring_substr(cstring\ *cs,\ size_t\ pos,\ size_t\ len)
Extract a substring from current string.
.TP
.BR void\ cstring_swap(cstring\ *lhs,\ cstring\ *rhs)
Swap contents of two strings.
.TP
.BR void\ cstring_shrink_to_fit(cstring\ *cs)
Reduce string's capacity to its size.
.TP
.BR void\ cstring_clear(cstring\ *cs)
Erase the whole string.
.TP
.BR size_t\ cstring_find(const\ cstring\ *cs,\ const\ char\ *s)
Find first occurence of a pattern in string.
.TP
.BR size_t\ cstring_find_first_of(const\ cstring\ *cs,\ const\ char\ *s)
Find first occurence of specified characters in string.
.TP
.BR size_t\ cstring_find_first_not_of(const\ cstring\ *cs,\ const\ char\ *s)
Find the first character that does not match any of the specified characters.
.TP
.BR size_t\ cstring_find_last_of(const\ cstring\ *cs,\ const\ char\ *s)
Find last occurence of specified characters in string.
.TP
.BR size_t\ cstring_find_last_not_of(const\ cstring\ *cs,\ const\ char\ *s)
Find the last character that does not match any of the specified characters.
.TP
.BR char\ cstring_front(const\ cstring\ *cs)
Returns the first character of the string.
.TP
.BR char\ cstring_back(const\ cstring\ *cs)
Returns the last character of the string.
.TP
.BR int\ cstring_empty(const\ cstring\ *cs)
Check to see if the string is empty.
.TP
.BR int\ cstring_starts_with_str(const\ cstring\ *cs,\ const\ char\ *s)
Check to see if string begins with
.I s
.TP
.BR int\ cstring_ends_with_str(const\ cstring\ *cs,\ const\ char\ *s)
Check to see if string ends with
.I s
.TP
.BR int\ cstring_starts_with_char(const\ cstring\ *cs,\ char\ c)
Check to see if string starts with
.I c
.TP
.BR int\ cstring_ends_with_char(const\ cstring\ *cs,\ char\ c)
Check to see if string ends with
.I c
.TP
.BR char\ *cstring_copy(const\ char\ *s)
Make a copy of a given
.I const\ char\ *
.TP
.BR void\ cstring_resize(cstring\ *cs,\ size_t\ newcapacity)
Resize the
.I str
array inside a given
.I cstring
struct.
.TP
.BR cstring\ *cstring_getline(FILE\ *fd,\ cstring\ *cs,\ char\ delim)
Read a line from a
.I FILE
stream. Similar behavior to
.I stdio's\ getline
.SH MACROS
.TP
.BR CSTRING_OUT_OF_BOUNDS(cs,\ pos)
Check if
.I pos
is out of bounds.
.SH CONSTANTS
.TP
.BR CSTRING_NPOS
This constant signifies that a pattern hasn't been found inside
the string. It's value is -1.
.SH USAGE
You must
.B always
call the
.I cstring_create
and
.I cstring_delete
functions whenever you want to make a new instance of
.I cstring
and stop using it respectively, in order to not cause any memory
leaks.
.P
The recommended way of initializing an empty string is by doing
.I cstring foo = cstring_create("")
.P
If a function requires a
.I char *
you can access the
.I .str
field and pass it to the function.
.SH AUTHORS
Christos Margiolis <christos@christosmarg.xyz>
